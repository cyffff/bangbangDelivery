# Multi-stage build for minimal Node.js service
FROM node:18-alpine AS builder
WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install dependencies (production only)
RUN npm ci --only=production --no-audit --no-optional && \
    npm cache clean --force

# Runtime stage with minimal Alpine image
FROM node:18-alpine AS runtime
WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001 -G nodejs

# Copy dependencies and source
COPY --from=builder --chown=nodeuser:nodejs /app/node_modules ./node_modules
COPY --chown=nodeuser:nodejs package*.json ./
COPY --chown=nodeuser:nodejs src/ ./src/

USER nodeuser

EXPOSE 8083

# Use dumb-init and optimize Node.js memory
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "--max-old-space-size=256", "src/index.js"]

HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8083/health || exit 1 